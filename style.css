body{
    font-family: Arial, Helvetica, sans-serif;
    color: #000;
    text-align: center;
}
.item{
    padding: 5px;
    margin: 5px;
    background: #447;
    text-align: center;
    font-size: 1em;
    color: #fff;
}
.container{
    max-width: 400px;
    margin: 0px auto;
    border: 1px solid #000;
}

/* display:flex
Transforma o Container em flexivel
*/
.flexivel{
    display: flex;
}

/* flex-direction
Muda o ponto de partida "Direção do Eixo" de Baixo para Cima e de Trás para Frente
*/
.horizontal{
    flex-direction: row;
}
.horizontal-reverso{
    flex-direction: row-reverse;
}
.vertical{
    flex-direction: column;
}
.vertical-reverso{
    flex-direction: column-reverse
}

/* flex-wrap
Altera para quebra de linha, para se encaixar dentro do container
*/  
.nao-quebra-linha{
    flex-wrap: nowrap;
}
.quebra-linha{
    flex-wrap: wrap;
}
.quebra-linha-reverso{
    flex-wrap: wrap-reverse;
}

/* flex-flow
Shorthand de flex-direction e flex-wrap */
.linha-sem-quebra{
    flex-flow: row nowrap;
}
.linha-com-quebra{
    flex-flow: row wrap;
}
.coluna-com-quebra{
    flex-flow: column;
}
.coluna-com-quebra-reversa{
    flex-flow: column-reverse;
}

/* justify-content - EIXO PRINCIPAL
Alinhamento dos elementos pelo eixo principal 'main', dependendo da propriedade flex-direction.
*/
.alinhamento-main-comeco{
    justify-content: flex-start;
}
.alinhamento-main-fim{
    justify-content: flex-end;
}
.alinhamento-main-meio{
    justify-content: center;
}
.alinhamento-main-esquerda-direita{
    justify-content: space-between;
}
.espacamento-main-esquerda-direita{
    justify-content: space-around;
}
.espacamento-main-igual{
    justify-content: space-evenly;
}

/* align-items - EIXO SECUNDÁRIO
Alinhamento dos elementos pelo eixo secundário 'cross', dependendo da propriedade flex-direction.
*/
.alinhamento-itens-cross-esticado{
    align-items: stretch;
}
.alinhamento-itens-cross-comeco{
    align-items: flex-start;
}
.alinhamento-itens-cross-fim{
    align-items: flex-end;
}
.alinhamento-itens-cross-meio{
    align-items: center;
}
.alinhamento-itens-cross-base{
    align-items: baseline;
}

/* align-content - EIXO SECUNDÁRIO
Alinhamento dos elementos pelo eixo secundário 'cross' dependendo da propriedade flex-wrap:wrap, sem as distribuições dos itens que o align-items faz.
*/
.alinhamento-content-cross-esticado{
    align-content: stretch;
}
.alinhamento-content-cross-comeco{
    align-content: flex-start;
}
.alinhamento-content-cross-fim{
    align-content: flex-end;
}
.alinhamento-content-cross-meio{
    align-content: center;
}
.espacamento-content-cross-esquerda-direita{
    align-content: space-around;
}
.alinhamento-content-cross-esquerda-direita{
    align-content: space-between;
}

/* flex-grow - ITEM
    É o tamanho que o elemento ocupará dentro do container, flex-grow: 0 ou 1 ou 2 ou 3.
    E o justify-content não se aplica quando estiver usando flex-grow nos elementos.
*/
.tamanho0{
    flex-grow: 0;
}
.tamanho1{
    flex-grow: 1;
}
.tamanho2{
    flex-grow: 2;
}
.tamanho3{
    flex-grow: 7;
}

/* flax-basis
    É o tamanho base do elemento (item) quando usamos flex-grow.
    O flex-basis define o tamanho inicial que um item deve ter antes que o espaço ao seu redor seja distribuído. Ou seja, dependendo da direção do eixo principal (horizontal ou vertical), essa propriedade define a largura ou altura mínima do elemento antes que ele seja redimensionado por outras propriedades.
*/
.basea{
    flex-basis: auto;
}
.base0{
    flex-basis: 0;
}
.base1{
    flex-basis: 1;
}
.base2{
    flex-basis: 2;
}

/* order - ITEM
    Elemento de flex-item, que ordena os elementos (itens) dentro do container.
    Usado diretamente nos elementos (itens) dentro do container.
    Podem ser usador números positivos e negativos.
*/
.ordem1{
    order: 0;
}
.ordem2{
    order: 1;
}
.ordem3{
    order: 2;
}
.ordem4{
    order: 3;
}
.ordem5{
    order: 4;
}

/* flex-shrink
    É dependente da propriedade flex-wrap:nowrap.
    Determina se um elemento(item) vai ter a capacidade de reduzir ou não, e tem por padrão o valor 1 que é o valor com capacidade de redução e o valor 0 não pode reduzir o elemento(item).
    Quanto maior o valor, maior é a capacidade de redução do elemento.   
*/
.reduzir0{
    flex-shrink: 0;
}
.reduzir1{
    flex-shrink: 1;
}
.reduzir2{
    flex-shrink: 2;
}
.reduzir3{
    flex-shrink: 3;
}

/* flex
    Shorthand de: flex-grow flex-shrink flex-basis;
    o mais usado é flex:0; e flex:1;   
    
    flex: 0; é o mesmo que:
    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: 0;

    flex: 1; é o mesmo que:
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0;

    Pode ser usado assim também:
    flex: valor valor pixel;
*/
.flex0{
    flex: 0;
}
.flex1{
    flex: 1;
}
.flexValor{
    flex: 3 2 200px;
}
.shorthand-flex0{
    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: 0;
}
.shorthand-flex1{
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0;   
}
.shorthand-flex-valor{
    flex-grow: 3;
    flex-shrink: 2;
    flex-basis: 200px; 
}

/* algin-self - ITEM
    Alinhamento de cada item pelo eixo secundário 'cross' dependendo da propriedade flex-direction.
*/
.alinhamento-item-cross-comeco{
    align-self: flex-start;
}
.alinhamento-item-cross-fim{
    align-self: flex-end;
}
.alinhamento-item-cross-meio{
    align-self: center;
}